---
title: PUP Purpose and Guidelines
author: Brian Bouterse
---

Summary
=======

This proposal is designed to

Motivation
==========

As initially [raised on the pulp-dev list](https://www.redhat.com/archives/pulp-dev/2017-February/msg00014.html),
Pulp lacks a process to propose, track, and decide on changes that affect the Pulp community.

This is a problem that has been addressed by many communities. The process outlined in this document
is inspired by processes in the Foreman, Python, and Django communities.


What are these called?
======================

We need an acronym or initialization for these. Here are some quick ideas:

* "Pulp Update Proposal" (PUP)
* "Pulp Change Proposal" (PCP)
* <Your idea here>


Tracking Proposals
==================

Proposals would be in restructured text format and sent as a pull request against the
pulpproject.org repo or a dedicated repo. We could easily create a tab at the top of pulpproject.org
to show off merged proposals. This could also be in a separate, dedicated repo like Python does, but
for simplicity I'm modeling this using the pulpproject.org repo. The idea to render proposals is
similar to how [Python Enhancement Proposals (PEPs)](https://www.python.org/dev/peps/pep-0001/)
work, which are markdown documents that are also viewable/readable as rendered documents via a
browser.


Finding/Discovering Proposals
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

An index mimicking [the Python one](https://www.python.org/dev/peps/) would be created which would
show all proposals in different states (active, approved, rejected, abandoned). These would also be
viewable via pulpproject.org in a dedicated area.


Proposal Lifecycle
==================

Before Proposing
^^^^^^^^^^^^^^^^

Discussing an idea via the list prior to writing a formal proposal is encouraged. This is designed
to save the author time by gathering feedback quickly before writing a concrete, detailed proposal.

Announcement
^^^^^^^^^^^^

Once a proposal is merged to the proposals area, an announcement would be sent to pulp-dev, which
would include a very brief introduction and a link to the proposal in its web viewable form.

Discussion and Feedback
^^^^^^^^^^^^^^^^^^^^^^^

General discussion would occur on the announcement thread via pulp-dev. Threaded e-mail readers
should make this conversation format easy to follow, while keeping the one proposal document in-tact
and easy to read.


Revision
^^^^^^^^

Revision would occur as additional pull requests against the active proposal. This allows the full
history of a proposal to always be maintained. This is how Python does it. This also allows
edits/updates to come with a commit message indicating the concerns addressed or improvements.
Collaboration is also easy with a collaborator sending revisions to the author as a patch or a new
PR against the proposal.


Expressing Support/Concern
^^^^^^^^^^^^^^^^^^^^^^^^^^

The +1, +0, -0, -1 [feedback process of the Django community](https://docs.djangoproject.com/en/dev/internals/contributing/bugs-and-features/#how-we-make-decisions)
would be used. These would be sent as responses via the pulp-dev mailing list. A -1 feedback must
come with a statement of objective concerns explaining what harm will come from adopting the
proposal. -1 feedback should not be used to express subjective preferences. Note that votes can come
from anyone, not just core devs. This is directly modeled after the Django process [3] who modeled
their process after the Python and Apache communities.


Proposal Requirements
=====================

This is a modified version of [the Foreman template](https://github.com/theforeman/rfcs/blob/master/0000-template.md).

::

    Proposal Name: <name goes here>

    Summary
    =======

    One paragraph explanation of the feature.


    Motivation
    ==========

    Why are we doing this? What problem is it designed to solve? What is the expected outcome?

    Detailed Design
    ===============

    This is the bulk of the RFC. Explain the design in enough detail for somebody familiar with the
    project to understand, and for somebody familiar with the codebase to implement. This should get
    into specifics and corner-cases, and include examples of how the feature is used.

    Drawbacks
    =========

    Why should we not do this?

    Alternatives
    ============

    What other designs have been considered? What is the impact of not doing this?

    Unresolved Questions
    ====================

    What parts of the design are still TBD?


Reaching a Decision
===================

How Long?
^^^^^^^^^

The initial announcement needs to identify a must-respond-by date and time. This should be no less
than 10 calendar days from the initial announcement. Longer periods are also OK, and can be adjusted
via the list based on feedback via the list. I think using calendar days is better than business
days because the whole world treats calendar days the same. I suggest 10 because sometimes people go
offline for a whole week. Longer than 10 days and I think the process could become too slow.


Deciding Yes/No
^^^^^^^^^^^^^^^

* If an obvious consensus arises via voting, the proposal is ratified. This is a bit vague, but it
  works for the Django community.
* Discussion can occur to confirm if consensus is obvious or not.
* Votes come from anyone, not just core devs
* A -1 from a core dev is considered a veto vote and will block ratification until the vote is
  recast.
* Core devs are expected to consider and echo serious feedback from the community especially any -1
  votes from community members.
* Consensus is not only possible. If obvious consensus is not reached, then the core devs decide.


Why Approve/Reject This Way?
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* It treats community decision making (not just core dev decision making) as a first class principle
* It works for the best communities we know of (Django, Python, Apache, etc)
* It allows people to be as involved or not as they way
* It allows serious concerns to not be dismissed (due to a -1 veto vote from core dev)


Approval
^^^^^^^^

* The proposal index is updated moving it from an active section to an approved area. This is
  similar to the index of PEPs for Python.
* A post-approval announcement should be sent in the same thread as the initial announcement and
  discussion, preferably with the link to the approved proposal visible via pulpproject.org


Rejected or Abandoned Proposals
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* They are moved in the index from the active section to the rejected or abandoned sections.
* The proposal text stays committed and is not removed.


Is This Replacing Story Planning in Redmine?
============================================

No. This is for changes to process and should not be used to discuss the feature set or bugs of
Pulp. Feature and bug discussion would continue to occur as-is (on pulp.plan.io). Two recent-ish
examples of things which could have gone through this process include "Napoleon docstrings or not?",
"To Merge forward or not?".

This is different than the communities we are modeling our process after. They use it for feature
planning also, but I propose that we don't do that currently.


Examples
========

* This proposal
* All the PEPs in both [web](https://www.python.org/dev/peps/) and
  [raw](https://github.com/python/peps) form.